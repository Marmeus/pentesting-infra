version: "3"

include: 
  - ./PwnDoc/docker-compose.yml
services:
  pykms:
    container_name: py-kms
    image: pykmsorg/py-kms:latest
    ports:
      - "1688:1688"
    restart: unless-stopped
  # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    #  - "80:80/tcp"
    environment:
      TZ: 'Europe/Madrid'
      WEBPASSWORD: '<PIHOLE_PASSWD>'
    # Volumes store your data between container upgrades
    volumes:
      - './PiHole/backup/:/backup'
      - './PiHole/etc-pihole:/etc/pihole'
      - './PiHole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    restart: unless-stopped

  # Installation:
  # mkdir -p ./Gitea/{data,config}
  # sudo chown 1000:1000 ./Gitea/{config/,data/}
  # ln -s /tmp/ ./Gitea/backup
  
  # Restore backup
  # 1. Finish installation
  # 2. Follow those steps https://docs.gitea.com/administration/backup-and-restore#using-docker-rootless-restore
  gitea:
    image: gitea/gitea:nightly-rootless
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=gitea-postgress:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea
    restart: unless-stopped
    volumes:
      - ./Gitea/data:/var/lib/gitea
      - ./Gitea/config:/etc/gitea
      - ./Gitea/backup:/backup
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    #ports:
    #  - "3000:3000"
    #  - "2222:2222"
    depends_on:
      - gitea-postgress

  gitea-postgress:
    image: postgres:14
    restart: unless-stopped
    environment:
      - POSTGRES_USER=gitea
      - POSTGRES_PASSWORD=gitea
      - POSTGRES_DB=gitea
    volumes:
      - ./Gitea/postgres:/var/lib/postgresql/data


  # Before creating the docker
  # mkdir -p /Nginx/{conf.d,ssl}
  # cp default.conf ./Nginx/conf.d
  # cd ./Nginx/ssl && openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout nginx-selfsigned.key -out nginx-selfsigned.crt
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
    - ./Nginx/conf.d:/etc/nginx/conf.d
    - ./Nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    depends_on:
      - pwndoc-frontend
      - gitea
      - pihole
      

  # mkdir Wireguard
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
      - SERVERPORT=51820 #optional
      - PEERS=2 #optional
      - PEERDNS=auto #optional
      - INTERNAL_SUBNET=10.13.13.0 #optional
      - ALLOWEDIPS=0.0.0.0/0 #optional
      - PERSISTENTKEEPALIVE_PEERS= #optional
      - LOG_CONFS=true #optional
    volumes:
      - ./WireGuard/BackUps/:/config
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  netdata:
    container_name: netdata
    image: netdata/netdata
    pid: host
    hostname: netdata.lan
    # Cuando este nginx descomentar healthcheck y comentar "ports"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.17.0.1:19999"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m
    network_mode: "host"
    #ports:
    #   - 172.17.0.1:19999:19999
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
